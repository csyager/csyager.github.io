<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Connor Yager</title>
    <description>My personal website, where I keep updates on projects that I'm working on,  notable events in my life, and other such information.  
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 17 Jun 2020 22:54:54 -0400</pubDate>
    <lastBuildDate>Wed, 17 Jun 2020 22:54:54 -0400</lastBuildDate>
    <generator>Jekyll v3.8.7</generator>
    
      <item>
        <title>Delta Sig Rush Site</title>
        <description>&lt;p&gt;Going into my fourth year, one of the biggest yearly difficulties I faced was rush voting.  This is a process that can take legitimately up to 6 hours in each of the four rounds of voting, most of which occur on weeknights where the brothers have class the next day.  Rush is an essential process for a fraternity, as our existence and financial security rest solely on our ability to recruit new members.  While we had a system in place to track people coming through the door, it was clear to me that our system could be improved.&lt;/p&gt;

&lt;p&gt;Notably, there was no electronic system in place for voting.  This was by and large the biggest time sink in the entire process.  Voting is usually conducted by raise of hand or by placing votes in a bag.  This process was not efficient, and was one that I felt I could help optimize.  Challenges involved were making sure that every brother was able to access the site, that their votes and interactions with the rushees would be counted distinctly and attributed to their user accounts, and combining various technologies to make sure that we were tracking essential information on each of the rushees, including a picture of themselves that they take at the door and their contact information.  To do this, I used the Django framework, because I was familiar with it through my coursework, and because it handles a lot of the user account stuff natively.&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Jun 2020 01:45:00 -0400</pubDate>
        <link>http://localhost:4000/project/2020/06/04/deltasigrush.html</link>
        <guid isPermaLink="true">http://localhost:4000/project/2020/06/04/deltasigrush.html</guid>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>GreekLink</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://travis-ci.com/csyager/greeklink-core&quot;&gt;&lt;img src=&quot;https://travis-ci.com/csyager/greeklink-core.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GreekLink is a software project a few friends and I have been working on.  At my fraternity chapter, we traditionally spend a lot of time conducting rush voting.  It’s a huge hassle, having to vote on every person that walks through the doors, with each of the four rounds of voting taking usually between 3 and 6 hours.  We used a web application designed by an alumni that wasn’t particularly user-friendly, and was in need of some improved tools to increase productivity.&lt;/p&gt;

&lt;p&gt;To fix these issues, I volunteered to redesign the site, with the primary goal being that we could conduct voting electronically.  In the past, voting was conducted by either a show of hands or the placing of chips in a bag.  These processes both took a matter of minutes to conduct, and my goal was to reduce this operation to a matter of seconds.  To do this, I designed a highly interactive web application using the Django python framework.  The site was deployed using Heroku, and managed everything involved in rush, from the scheduling of events to rushees signing in at the door to track attendance to the voting itself.  When it came time to conduct voting, rushees were pulled from our database of people who had attended the events, and users could place their votes on their phones.&lt;/p&gt;

&lt;p&gt;While there were a few hiccups to work through as we pushed the boundaries of how much load the application could handle from time to time, it eventually got to a point where things were running really smoothly.  So smoothly, in fact, that we decided to expand the site to include features for planning and managing social events throughout the semester.  This got my friends and I thinking, and we reached the conclusion that we could create a one-stop-shop for all of the people-management, planning, and communication that goes into running a Greek organization and sell the product for profit.  Thus, GreekLink was born.&lt;/p&gt;

&lt;p&gt;While it is still a work in progress, many of the systems that were thrown together haphazardly for the initial product that my fraternity used have been deeply refined and polished.  We’ve been looking into elastic hosting options that will allow us to scale out to meet the needs of mulitple Greek organizations, and will hopefully even be able to facilitate communication amongst the community through our application.  This project has been a lot of fun, and I’m excited to see where it will go next.&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Jun 2020 01:45:00 -0400</pubDate>
        <link>http://localhost:4000/project/2020/06/04/greeklink.html</link>
        <guid isPermaLink="true">http://localhost:4000/project/2020/06/04/greeklink.html</guid>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>New Site</title>
        <description>&lt;p&gt;Due to the technical difficulties involved in maintaining the old version of connoryager.com, I’ve decided to mostly rebuild it and utilize the tools offered by Jekyll and Github to learn something new and make it a little simpler.  While my old blog was a lot of fun, setting things up like user accounts and hosting it all from an old laptop running in my parents’ house, I’ve decided to throw together something a little easier to maintain and more like a professional portfolio.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jun 2020 15:47:32 -0400</pubDate>
        <link>http://localhost:4000/blog/2020/06/01/new-site.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2020/06/01/new-site.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 01 Jun 2020 15:17:32 -0400</pubDate>
        <link>http://localhost:4000/blog/2020/06/01/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2020/06/01/welcome-to-jekyll.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
